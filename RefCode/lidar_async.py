try:
    from config import *
    from manual_control import *
    from display import *
except ImportError:
    raise RuntimeError('cannot import config file')

surface = None


# def process_img(image):
#     """
#     process the image
#     """
#     global surface
#     array = np.frombuffer(image.raw_data, dtype=np.dtype("uint8"))
#     array = np.reshape(array, (image.height, image.width, 4))
#     array = array[:, :, :3]
#     array = array[:, :, ::-1]  # switch r,g,b
#     array = array.swapaxes(0, 1)  # exchange the width and height
#     surface = pygame.surfarray.make_surface(array)  # Copy an array to a new surface
#
#     image_name = image.frame
#     image.save_to_disk('D:\\mb95541\\aeroplane\\image\\%d' % image_name)


def process_lidar(data):
    pass


def carla_main():
    # --- pygame show --- #
    pygame.init()
    display = pygame.display.set_mode((IMG_WIDTH, IMG_HEIGHT), pygame.HWSURFACE | pygame.DOUBLEBUF)
    font = get_font()
    clock = pygame.time.Clock()
    try:
        # --- client --- #
        client = carla.Client('localhost', 2000)
        client.set_timeout(10.0)  # connect with server

        # --- world --- #
        world = client.get_world()
        settings = world.get_settings()
        settings.synchronous_mode = False  # Disables synchronous mode
        world.apply_settings(settings)
        # map = world.get_map()

        # --- weather --- #
        # 1. change weather params: carla.WeatherParameters  https://carla.readthedocs.io/en/0.9.3/python_api_tutorial/
        # 2. set_weather:  https://carla.readthedocs.io/en/0.9.3/python_api/#carlaweatherparameters
        # world.set_weather(carla.WeatherParameters.ClearNoon)

        # --- vehicle --- #
        blueprint_library = world.get_blueprint_library()
        vehicle_bp = blueprint_library.filter('model3')[0]
        # vehicle property  https://carla.readthedocs.io/en/0.9.3/python_api/#carlaactorblueprint
        vehicle_bp.set_attribute('role_name', 'runner')
        white = '255.0, 255.0, 255.0'
        vehicle_bp.set_attribute('color', white)

        # --- start point --- #
        # 1. spawn point
        spawn_point = carla.Transform(carla.Location(x=136, y=315, z=3),
                                      carla.Rotation(pitch=0.000000, yaw=270.000, roll=0.000000))
        print('spawn_point:', spawn_point)
        # generate the vehicle
        vehicle = world.spawn_actor(vehicle_bp, spawn_point)
        print("vehicle is spawned!")
        # set the physics Determines whether an actor will be affected by physics or not
        vehicle.set_simulate_physics(True)
        actor_list.append(vehicle)
        # time.sleep(3.0)

        # --- lidar sensor --- #
        lidar_bp = blueprint_library.find('sensor.lidar.ray_cast')
        lidar_bp.set_attribute("channels", "16")  # Number of lasers.
        lidar_bp.set_attribute("range", "100.0")  # Maximum distance to measure/raycast in meters
        lidar_bp.set_attribute("points_per_second", "36000")  # Points generated by all lasers per second. default 56000
        lidar_bp.set_attribute("rotation_frequency", "10")  # Lidar rotation frequency. default 10
        lidar_bp.set_attribute("upper_fov", "25")  # Angle in degrees of the highest laser.
        lidar_bp.set_attribute("lower_fov", "-25")  # Angle in degrees of the lowest laser.
        lidar_bp.set_attribute("sensor_tick", "0.0")  # Simulation seconds between sensor captures (ticks).

        # # 3. add camera sensor to the vehicle, put the sensor in the car. rotation y x z
        spawn_point = carla.Transform(carla.Location(x=0.5, y=0.0, z=3),
                                      carla.Rotation(pitch=0.0, yaw=0.0, roll=0.0))
        lidar = world.spawn_actor(lidar_bp, spawn_point, attach_to=vehicle)

        lidar.listen(lambda data: process_lidar(data))

        actor_list.append(lidar)
        #
        # # --- controller --- #
        controller = KeyboardControl(vehicle)
        #
        # # --- Create a synchronous mode context ---#
        while True:
            if should_quit():
                return
            clock.tick(30)

            # don't delete! Will crash if surface is None
            if not surface:
                continue

            controller.parse_events(clock)
            vehicle_velocity = get_speed(vehicle)
            print(vehicle_velocity)

            display.blit(font.render('% 5d FPS (real)' % clock.get_fps(), True, (255, 255, 255)), (8, 10))
            display.blit(font.render('% 5d mk/h (velocity)' % vehicle_velocity, True, (0, 0, 0)), (8, 46))

            pygame.display.flip()
            display.blit(surface, (0, 0))

    finally:
        print('destroying actors')
        for actor in actor_list:
            actor.destroy()
        pygame.quit()
        print('done.')


if __name__ == '__main__':
    carla_main()
